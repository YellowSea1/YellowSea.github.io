<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>二分法|时间复杂度|动态数组|哈希表</title>
    <url>/2021/01/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E3%80%81%E5%A4%8D%E6%9D%82%E5%BA%A6%E3%80%81%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E3%80%81%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><p>几种应用场景：</p>
<ul>
<li><strong>有序数组</strong>中找到num</li>
<li><strong>有序数组</strong>中找到&gt;=num最左的位置</li>
<li><strong>有序数组</strong>中找到&lt;=num最右的位置</li>
<li>局部最小值问题</li>
</ul>
<h3 id="1-有序数组中找到num"><a href="#1-有序数组中找到num" class="headerlink" title="1.有序数组中找到num"></a>1.有序数组中找到num</h3><h3 id="2-有序数组中找到-gt-num最左的位置"><a href="#2-有序数组中找到-gt-num最左的位置" class="headerlink" title="2.有序数组中找到&gt;=num最左的位置"></a>2.<strong>有序数组</strong>中找到&gt;=num最左的位置</h3><p>array[mid]&lt;num 舍去左边部分，改变左边界L=mid+1</p>
<p>array[mid]&gt;=num 舍去右边部分，改变右边界R=mid-1  //等号在这里，舍去靠右的index  <strong>易错</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mostLeftNoLessNumIndex</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array.length == <span class="number">0</span> || array == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> L = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> R = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (L &lt;= R) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> midValue=array[mid];</span><br><span class="line">            <span class="keyword">if</span> (midValue &lt; num) &#123;</span><br><span class="line">                L = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//array[mid]&gt;num</span></span><br><span class="line">                R = mid - <span class="number">1</span>;</span><br><span class="line">                ans = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-有序数组中找到-lt-num最右的位置"><a href="#3-有序数组中找到-lt-num最右的位置" class="headerlink" title="3.有序数组中找到&lt;=num最右的位置"></a>3.<strong>有序数组</strong>中找到&lt;=num最右的位置</h3><p>array[mid]&lt;=num舍去左边部分，改变左边界L=mid+1 //等号在这里，舍去靠左的index <strong>易错</strong></p>
<p>array[mid]&gt;num 舍去右边部分，改变右边界R=mid-1 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mostRightNoMoreIndex</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (array.length == <span class="number">0</span> || array == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> L = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> R = array.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (L &lt;= R) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (array[mid] &lt;= num) &#123;</span><br><span class="line">            L = mid + <span class="number">1</span>;</span><br><span class="line">            ans = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//array[mid]&gt;num</span></span><br><span class="line">            R = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-局部最小值问题"><a href="#4-局部最小值问题" class="headerlink" title="4.局部最小值问题"></a>4.局部最小值问题</h3><p>条件：数组是无序的，且相邻数不相等</p>
<p>分析思路：</p>
<p><img src="https://gitee.com/hhn060206/img/raw/master/img/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="分析思路"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arr 整体无序</span></span><br><span class="line">	<span class="comment">// arr 相邻的数不相等！</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">oneMinIndex</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> N = arr.length;</span><br><span class="line">		<span class="keyword">if</span> (N == <span class="number">1</span>) &#123; <span class="comment">//容易遗漏的边界条件</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (arr[<span class="number">0</span>] &lt; arr[<span class="number">1</span>]) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (arr[N - <span class="number">1</span>] &lt; arr[N - <span class="number">2</span>]) &#123;</span><br><span class="line">			<span class="keyword">return</span> N - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> L = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> R = N - <span class="number">1</span>;</span><br><span class="line">		<span class="comment">// L...R 肯定有局部最小</span></span><br><span class="line">		<span class="keyword">while</span> (L &lt; R - <span class="number">1</span>) &#123;  <span class="comment">// L-R至少有三个数,否则mid-1会溢出</span></span><br><span class="line">			<span class="keyword">int</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span> (arr[mid] &lt; arr[mid - <span class="number">1</span>] &amp;&amp; arr[mid] &lt; arr[mid + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="keyword">return</span> mid;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[mid] &gt; arr[mid - <span class="number">1</span>]) &#123;</span><br><span class="line">					R = mid - <span class="number">1</span>;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123; <span class="comment">// arr[mid]&lt;arr[mid-1]</span></span><br><span class="line">					L = mid + <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> arr[L] &lt; arr[R] ? L : R;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>二分不一定需要有序，在某一个标准下，只要确定某一侧肯定有，就可以二分</p>
</blockquote>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>在算法函数中，数据量很大时最高阶项算法和时间的关系；</p>
<p>要假设最差情况，才是算法的时间复杂度。</p>
<h3 id="常见时间复杂度列表-（略）"><a href="#常见时间复杂度列表-（略）" class="headerlink" title="常见时间复杂度列表 （略）"></a>常见时间复杂度列表 （略）</h3><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><p>ArrayList</p>
<p>扩容代价：数组扩容n个数(扩容操作：扩容、拷贝，算法函数是等比数列)，时间复杂度为O(n)，均摊到每次扩容，时间复杂度为O(n)/n=1，很小，<strong>可以忽略不计</strong>；<strong>故动态数组的优点是，从时间复杂度来说，和固定数组性能相差不大，还可以动态扩容。</strong></p>
<p><img src="https://gitee.com/hhn060206/img/raw/master/img/image-20220103194317735.png" alt="扩容过程"></p>
<h2 id="哈希表和有序表"><a href="#哈希表和有序表" class="headerlink" title="哈希表和有序表"></a>哈希表和有序表</h2><h3 id="哈希表-HashMap"><a href="#哈希表-HashMap" class="headerlink" title="哈希表   HashMap()"></a>哈希表   HashMap()</h3><ol>
<li><p>增删查改操作时间复杂度都是常数级别，但是时间略长</p>
</li>
<li><p>基本数据类型按值传递，自定义类型按引用传递；即基本数据类型在哈希表中存储的是值本身，自定义的类型在哈希表中存储的是引用；哈希表的基本数据类型在比较时会比较值，自定义类型会比较引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基本数据类型按值传递</span></span><br><span class="line">String test1 = <span class="string">&quot;zuochengyun&quot;</span>;</span><br><span class="line">String test2 = <span class="string">&quot;zuochengyun&quot;</span>;</span><br><span class="line">System.out.println(map.containsKey(test1)); <span class="comment">//输出true</span></span><br><span class="line">System.out.println(map.containsKey(test2)); <span class="comment">//输出false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义的类型按引用传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">			value = v;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node node1 = <span class="keyword">new</span> Node(<span class="number">1</span>);</span><br><span class="line">Node node2 = <span class="keyword">new</span> Node(<span class="number">1</span>);</span><br><span class="line">HashMap&lt;Node, String&gt; map3 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map3.put(node1, <span class="string">&quot;我进来了！&quot;</span>);</span><br><span class="line">System.out.println(map3.containsKey(node1)); <span class="comment">//输出true</span></span><br><span class="line">System.out.println(map3.containsKey(node2)); <span class="comment">//输出false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="有序表-TreeMap"><a href="#有序表-TreeMap" class="headerlink" title="有序表  TreeMap()"></a>有序表  TreeMap()</h3><ol>
<li><p>键必须是可比较的(基本数据类型的键都可以比较)</p>
</li>
<li><p>一些常用的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeMap&lt;Integer,String&gt; treeMap=<span class="keyword">new</span> treeMap&lt;&gt;();</span><br><span class="line"><span class="comment">//增加</span></span><br><span class="line">treeMap.put(<span class="number">0</span>,<span class="string">&quot;我是0&quot;</span>);</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">treeMap.remove(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line">treeMap.get(<span class="number">0</span>); <span class="comment">//输出：我是0</span></span><br><span class="line"><span class="comment">//改</span></span><br><span class="line">treeMap.put(<span class="number">0</span>,<span class="string">&quot;我是1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取最小的key</span></span><br><span class="line">treeMap.firstKey();</span><br><span class="line"><span class="comment">//获取最大的key</span></span><br><span class="line">treeMap.lastKey();</span><br><span class="line"><span class="comment">//获取&lt;=num最近的key</span></span><br><span class="line">treeMap.floorKey(num);</span><br><span class="line"><span class="comment">//获取&gt;=num最近的key</span></span><br><span class="line">treeMap.cellingKey(num);</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>二分法 时间复杂度 动态数组 哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Hexo+github搭建个人博客</title>
    <url>/2021/12/28/blog/%E5%88%A9%E7%94%A8Hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="利用Hexo-github搭建个人博客"><a href="#利用Hexo-github搭建个人博客" class="headerlink" title="利用Hexo+github搭建个人博客"></a>利用Hexo+github搭建个人博客</h1><h2 id="1-搭建博客需要的工具"><a href="#1-搭建博客需要的工具" class="headerlink" title="1.搭建博客需要的工具"></a>1.搭建博客需要的工具</h2><h3 id="1-1安装node-js"><a href="#1-1安装node-js" class="headerlink" title="1.1安装node.js"></a>1.1安装node.js</h3><p>参考教程：<a href="https://space.bilibili.com/13282871/video">https://space.bilibili.com/13282871/video</a></p>
<p>安装完成后检查node.js以及下面的npm是否安装成功</p>
<p><img src="https://gitee.com/hhn060206/img/raw/master/img/image-20211219173436125.png" alt="image-20211219173436125"></p>
<h3 id="1-2安装git"><a href="#1-2安装git" class="headerlink" title="1.2安装git"></a>1.2安装git</h3><p>安装完成后检查是否安装成功</p>
<p><img src="https://gitee.com/hhn060206/img/raw/master/img/image-20211219173507543.png" alt="image-20211219173507543"></p>
<h3 id="1-3Hexo下载"><a href="#1-3Hexo下载" class="headerlink" title="1.3Hexo下载"></a>1.3Hexo下载</h3><p><code>npm install hexo-cli -g</code></p>
<p>检查是否安装成功</p>
<p><img src="https://gitee.com/hhn060206/img/raw/master/img/image-20211219173641891.png" alt="image-20211219173641891"></p>
<h2 id="2-创建github仓库"><a href="#2-创建github仓库" class="headerlink" title="2.创建github仓库"></a>2.创建github仓库</h2><p><img src="https://gitee.com/hhn060206/img/raw/master/img/image-20211219175114837.png" alt="image-20211219175114837"></p>
<p>命名格式必须是：注册名.github.io</p>
<h2 id="3-生成SSH-Keys"><a href="#3-生成SSH-Keys" class="headerlink" title="3.生成SSH Keys"></a>3.生成SSH Keys</h2><p>进入任意一个目录，调出git bash</p>
<p>生成ssh私钥和公钥 <code>ssh-keygen -t rsa -C &quot;邮件地址&quot;</code></p>
<p><img src="https://gitee.com/hhn060206/img/raw/master/img/image-20211221005037405.png" alt="image-20211221005037405"></p>
<p>一直enter就行</p>
<p>找到生成的公钥，一般在 C:\Users[account] .ssh 目录下id_rsa.pub文件,[account]是主机的用户名</p>
<p>将公钥添加至github</p>
<p><img src="https://gitee.com/hhn060206/img/raw/master/img/image-20211221005431677.png" alt="image-20211221005431677"></p>
<p> 检查公钥是否添加成功 <code>ssh -T git@github.com</code></p>
<p><img src="https://gitee.com/hhn060206/img/raw/master/img/image-20211221005519439.png" alt="image-20211221005519439"></p>
<h2 id="4-本地生成博客内容"><a href="#4-本地生成博客内容" class="headerlink" title="4.本地生成博客内容"></a>4.本地生成博客内容</h2><p>本地新建一个目录用于存放博客</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init <span class="comment">#初始化博客</span></span><br><span class="line">hexo g <span class="comment">#生成博客</span></span><br><span class="line">hexo s<span class="comment">#启动博客</span></span><br></pre></td></tr></table></figure>

<p>博客启动后本地访问网址</p>
<p><img src="https://gitee.com/hhn060206/img/raw/master/img/image-20211221100125779.png" alt="image-20211221100125779"></p>
<p>本地页面部署成功</p>
<p><img src="https://gitee.com/hhn060206/img/raw/master/img/image-20211221100558152.png" alt="image-20211221100558152"></p>
<h2 id="5-发布博客到互联网"><a href="#5-发布博客到互联网" class="headerlink" title="5.发布博客到互联网"></a>5.发布博客到互联网</h2><p>修改配置文件 _config.yml(在根目录下)</p>
<p><img src="https://gitee.com/hhn060206/img/raw/master/img/image-20211222153449132.png" alt="image-20211222153449132"></p>
<p>安装插件并将博客上传到gitee</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>此时需要登录github，登陆完之后自动上传</p>
<p>仓库setting中可以找到博客访问路径</p>
<p><img src="https://gitee.com/hhn060206/img/raw/master/img/image-20211222155203143.png" alt="image-20211222155203143"></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo butterfly</tag>
      </tags>
  </entry>
</search>
